<?php
/**
 * @file
 *  Drupal hooks for facility_search.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;


/**
 * Custom submit function for facility search exposed form.
 *
 * @param array $form
 * @param FormStateInterface $form_state
 * @return void
 */
// function facility_search_exposed_form_submit(&$form, &$form_state) {
//   $city_values = $form_state->getValue('city');
//   if (!empty($city_values) && $city_values == 'Any') {
//     $form_state->set('city', []);
//     $form_state->setValue('city', []);
//   }
// }

// function _facility_search_get_coordinates($zip) {
//   $curl = curl_init();
//   $options = _get_curl_options($zip);
//   curl_setopt_array($curl, $options);

//   $response = curl_exec($curl);
//   $response_json = json_decode($response);

//   // Filter out results for ZIP codes that come from other countries.
//   foreach ($response_json->results[0]->locations as $location) {
//     if ($location->adminArea1 == "US" && $location->adminArea3 = "MA") {
//       $coordinates['latitude'] = $location->latLng->lat;
//       $coordinates['longitude'] = $location->latLng->lng;
//     }
//   }

//   $err = curl_error($curl);

//   curl_close($curl);
//   return $coordinates;
// }

// function _get_curl_options($zip) {
//   $config = \Drupal::config('mapquest.open');
//   $key = $config->get('key');
//   return [
//       CURLOPT_URL => "https://open.mapquestapi.com/geocoding/v1/address?key=$key&location=$zip",
//       CURLOPT_RETURNTRANSFER => true,
//       CURLOPT_ENCODING => "",
//       CURLOPT_MAXREDIRS => 10,
//       CURLOPT_TIMEOUT => 30,
//       CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
//       CURLOPT_CUSTOMREQUEST => "GET",
//       CURLOPT_POSTFIELDS => "",
//   ];
// }

/**
 * Implements hook_form_alter().
 */
function facility_search_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if($form_id == 'user_login_form' ) {
    $form['name']['#placeholder'] = t('E-Mail Address');
    // Prevents homepage login form from centering in viewport (which cuts off top of page).
    $form['name']['#attributes']['autofocus'] = FALSE;
    $form['pass']['#placeholder'] = t('Password');
  }
}

/**
 * Implements hook_geocoder_provider_info_alter().
*/
function facility_search_geocoder_provider_info_alter(&$providers) {
  // Alter the google maps geocoder.
  // if (isset($providers['googlemaps'])) {
  //   $providers['googlemaps']['arguments']['useSsl'] = TRUE;
  //   $config = \Drupal::config('geolocation.settings');
  //   // Use the Google Map API key variable provided by the geolocation module.
  //   if (!empty($config->get('google_map_api_key'))) {
  //     $api_arg_key = array_search('apiKey', $providers['googlemaps']['arguments'], TRUE);
  //     // This is a numbered array, so have to remove the original key or there will be an extra argument.
  //     unset($providers['googlemaps']['arguments'][$api_arg_key]);
  //     $providers['googlemaps']['arguments']['apiKey'] = $config->get('google_map_api_key');
  //   }
  // };
}

/**
 * Implements hook_views_pre_view().
 */
// function facility_search_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
//   if ($view->id() !== 'facility_search') {
//     return;
//   }
//   $input = $view->getExposedInput();
//   // If other filters are being used, don't use the "keys" filter.
//   foreach ($input as $key => $value) {
//     if ($key !== 'keys' && !empty($value)) {
//       $input['keys'] = '';
//       break;
//     }
//   }
//   $view->setExposedInput($input);
// }

/**
 * Implements hook_preprocess_HOOK().
 */
// function facility_search_preprocess_views_view(&$variables) {
//   /** @var ViewExecutable $view */
//   // Prepare a display of the location.
//   $view = $variables['view'];
//   if ($view->current_display !== 'page_1' ||
//       $view->id() !== 'facility_search') {
//     return;
//   }
//   $input = $view->getExposedInput();
//   $header = '';
//   if (!empty($input['title'])) {
//     $header = t('Searching for @title', ['@title' => $input['title']]);
//   }
//   if (!empty($input['geocode_state']) && $input['geocode_state'] && !empty($input['geocode_postal'])) {
//     $distance = !empty($input['proximity']) ? $input['proximity'] : 5;
//     if (!empty($header)) {
//       $header .= ' ' . t('within @distance miles of @postal', ['@distance' => $distance, '@postal' => $input['geocode_postal']]);
//     }
//     else {
//       $header .= t('Searching within @distance miles of @postal', ['@distance' => $distance, '@postal' => $input['geocode_postal']]);
//     }
//   }
//   if (!empty($input['city'])) {
//     if (!empty($header)) {
//       $header .= ' ' . t('in @city', ['@city' => $input['city']]);
//     }
//     else {
//       $header = t('Searching in @city', ['@city' => $input['city']]);
//     }
//   }
//   if (!empty($input['keys'])) {
//     $header = t('Searching for "@keys"', ['@keys' => $input['keys']]);
//   }
//   $filter_values = [];
//   $input_display_blacklist = [
//     'title',
//     'proximity',
//   ];
//   foreach ($view->display_handler->getOption('filters') as $filter) {
//     if (
//       !isset($filter['expose']['identifier']) ||
//       !isset($input[$filter['expose']['identifier']]) ||
//       empty($filter['exposed']) ||
//       in_array($filter['expose']['identifier'], $input_display_blacklist)) {
//       continue;
//     }
//     $value = $input[$filter['expose']['identifier']];
//     if (empty($value)) {
//       continue;
//     }
//     if (is_array($value)) {
//       $value = implode(', ', array_values($value));
//     }
//     if (isset($filter['vid']) && is_numeric($value)) {
//       $value = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($value)->label();
//     }
//     $filter_values[$filter['expose']['label']] = $value;
//   }
//   // Prepare a display of the additional tags.
//   $variables['header']['location_input'] = [
//     '#type' => 'html_tag',
//     '#tag' => 'h2',
//     '#value' => $header,
//     '#cache' => [
//       'contexts' => [
//         'url.query_args',
//       ],
//       'max-age' => \Drupal\Core\Cache\Cache::PERMANENT,
//     ],
//   ];
//   // Add the other search filters.
//   if (!empty($filter_values)) {
//     $search_input = [];
//     foreach ($filter_values as $filter => $value) {
//       $search_input[] = [
//         '#markup' => "<em>$filter:</em> $value",
//         '#wrapper_attributes' => [
//           'class' => ['list-inline-item'],
//         ],
//       ];
//     }
//     $variables['header']['search_input'] = [
//       '#theme' => 'item_list',
//       '#items' => $search_input,
//       '#attributes' => [
//         'class' => [
//           'list-inline',
//         ],
//       ]
//     ];
//   }
// }


