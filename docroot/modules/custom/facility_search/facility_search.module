<?php
/**
 * @file
 *  Drupal hooks for facility_search.module
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function facility_search_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\views\ViewExecutable $view */
  $view = $form_state->get('view');
  if ($view->id() !== 'facility_search') {
    return;
  }

  // Hide the "keys" filter.
  $form['keys']['#type'] = 'hidden';

  // Turn the city filter into a dropdown.
  $cities = \Drupal::database()->select('node__field_address', 'address')
    ->fields('address', ['field_address_locality'])
    ->condition('bundle', 'facility')
    ->condition('field_address_locality', '', '<>')
    ->orderBy('field_address_locality', 'ASC')
    ->distinct()
    ->execute()->fetchCol();
  if (!empty($cities)) {
    $city_filter = $form['#info']['filter-field_address_locality']['value'];
    $cities = array_combine(array_values($cities), $cities);
    $form[$city_filter]['#type'] = 'select';
    $form[$city_filter]['#size'] = 1;
    $form[$city_filter]['#empty_option'] = t('-Select-');
    $form[$city_filter]['#options'] = $cities;
  }

  // Add placeholders to all text fields. Uses label values so they're editable in interface
  foreach($form['#info'] as $key => $form_info_item) {
    foreach ($form as $form_item_key => $form_item_value) {
      if ($form_item_key == $form_info_item['value']) {
        if ($form[$form_item_key]['#type'] == 'textfield') {
          $form[$form_item_key]['#placeholder'] = $form_info_item['label'];
        }
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function facility_search_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  if($form_id == 'user_login_form' ) {
    $form['name']['#placeholder'] = t('Username');
    $form['pass']['#placeholder'] = t('Password');
  }
}

/**
 * Implements hook_geocoder_provider_info_alter().
*/
function facility_search_geocoder_provider_info_alter(&$providers) {
  // Alter the google maps geocoder.
  if (isset($providers['googlemaps'])) {
    $providers['googlemaps']['arguments']['useSsl'] = TRUE;
    $config = \Drupal::config('geolocation.settings');
    // Use the Google Map API key variable provided by the geolocation module.
    if (!empty($config->get('google_map_api_key'))) {
      $api_arg_key = array_search('apiKey', $providers['googlemaps']['arguments'], TRUE);
      // This is a numbered array, so have to remove the original key or there will be an extra argument.
      unset($providers['googlemaps']['arguments'][$api_arg_key]);
      $providers['googlemaps']['arguments']['apiKey'] = $config->get('google_map_api_key');
    }
  };
}

/**
 * Implements hook_views_pre_view().
 */
function facility_search_views_pre_view(ViewExecutable $view, $display_id, array &$args) {
  if ($view->id() !== 'facility_search') {
    return;
  }
  $input = $view->getExposedInput();
  // If other filters are being used, don't use the "keys" filter.
  foreach ($input as $key => $value) {
    if ($key !== 'keys' && !empty($value)) {
      $input['keys'] = '';
      break;
    }
  }
  $view->setExposedInput($input);
}

/**
 * Implements hook_preprocess_HOOK().
 */
function facility_search_preprocess_views_view(&$variables) {
  /** @var ViewExecutable $view */
  $view = $variables['view'];
  if ($view->current_display !== 'page_1' ||
      $view->id() !== 'facility_search') {
    return;
  }
  $input = $view->getExposedInput();
  $header = '';
  if (empty($input['title']) && empty($input['geocode_state'])) {
    return;
  }
  $header = '';
  if (!empty($input['title'])) {
    $header = t('Searching for @title', ['@title' => $input['title']]);
  }
  if ($input['geocode_state'] && !empty($input['proximity'])) {
    if (!empty($header)) {
      $header .= ' ' . t('within @distance miles of @postal', ['@distance' => $input['proximity'], '@postal' => $input['geocode_postal']]);
    }
    else {
      $header .= t('Searching within @distance miles of @postal', ['@distance' => $input['proximity'], '@postal' => $input['geocode_postal']]);
    }
  }
  if (!empty($input['city'])) {
    if (!empty($header)) {
      $header .= ' ' . t('in @city', ['@city' => $input['city']]);
    }
    else {
      $header = t('Searching in @city', ['@city' => $input['city']]);
    }
  }
  $variables['header']['search_input'] = [
    '#type' => 'html_tag',
    '#tag' => 'h2',
    '#value' => $header,
    '#cache' => [
      'contexts' => [
        'url.query_args',
      ],
      'max-age' => \Drupal\Core\Cache\Cache::PERMANENT,
    ],
  ];
}

