<?php

use Drupal\netforum_org_sync\Geocode;
use Drupal\geocoder\GeocoderInterface;
use Drupal\Core\Entity\EntityTypeManager;
use Drupal\Component\Datetime\TimeInterface;
use Drupal\Core\Config\ConfigFactoryInterface;

/**
 * Update facilities with empty geolocation fields.
 */
function facility_search_update_8001(&$sandbox) {
  $nodes = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'facility']);

  foreach ($nodes as $node) {
    if (!empty($node->field_ge->lng) && !empty($node->field_ge->lat)) {
      continue;
    }
    if (!empty($node->field_address->postal_code)) {
      $zip = $node->field_address->postal_code;
      $coordinates = _facility_search_get_coordinates_update($zip);
      \Drupal::messenger()->addMessage('The following facility had its coordinates saved: ' . $node->getTitle());
      $node->set('field_ge', ['lat' => (int) $coordinates['latitude'], 'lng' => (int) $coordinates['longitude']]);
      $node->save();
    }
  }
}

function _facility_search_get_coordinates_update($zip) {
  $curl = curl_init();
  $coordinates = array();
  $options = _get_curl_options_update($zip);
  curl_setopt_array($curl, $options);

  $response = curl_exec($curl);
  $response_json = json_decode($response);

  // Filter out results for ZIP codes that come from other countries.
  foreach ($response_json->results[0]->locations as $location) {
    if ($location->adminArea1 == "US" && $location->adminArea3 = "MA") {
      $coordinates['latitude'] = $location->latLng->lat;
      $coordinates['longitude'] = $location->latLng->lng;
    }
  }

  $err = curl_error($curl);

  curl_close($curl);
  return $coordinates;
}

function _get_curl_options_update($zip) {
  $config = \Drupal::config('mapquest.open');
  $key = $config->get('key');
  return [
    CURLOPT_URL => "https://www.mapquestapi.com/geocoding/v1/address?key=$key&location=$zip",
    CURLOPT_RETURNTRANSFER => true,
    CURLOPT_ENCODING => "",
    CURLOPT_MAXREDIRS => 10,
    CURLOPT_TIMEOUT => 30,
    CURLOPT_HTTP_VERSION => CURL_HTTP_VERSION_1_1,
    CURLOPT_CUSTOMREQUEST => "GET",
    CURLOPT_POSTFIELDS => "",
  ];
}



/**
 * Update all facility geolocation coordinates.
 */
function schmacility_search_update_8002(&$sandbox) {
  $db_connection = \Drupal::database();
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $nids = \Drupal::entityTypeManager()
      ->getListBuilder('node')
      ->getStorage()
      ->loadByProperties([
        'type' => 'facility',
    ]);
    $sandbox['max'] = count($nids);
    $sandbox['messages'] = [];
    $sandbox['current_node'] = -1;
  }

  // Process nodes by groups of 10 (arbitrary value).
  // When a group is processed, the batch update engine determines
  // whether it should continue processing in the same request or provide
  // progress feedback to the user and wait for the next request.
  $limit = 10;

  // Retrieve the next group of nids.
  $query = $db_connection->select('node', 'n');
  $query->fields('n', ['nid', 'type']);
  $result = $query
    ->where('n.nid > :nid and n.type = :type', [':nid' => $sandbox['current_node'], ':type' => 'facility'])
    ->range(0, $limit)
    ->orderBy('n.nid', 'ASC')
    ->execute();
  foreach ($result as $row) {
    // Load the node and geocode it.
    $node = \Drupal::service('entity_type.manager')
      ->getStorage('node')
      ->load($row->nid);
    if (!empty($node->field_address->postal_code)) {
      $geocoder = \Drupal::service('facility_search.geocoder');
      $geocoder->setCoordinates($node);
      $node->save();
    }
    // Update our progress information.
    $sandbox['progress']++;
    $sandbox['current_node'] = $row->nid;
  }

  $sandbox['#finished'] = ($sandbox['progress'] >= $sandbox['max']) ? TRUE : ($sandbox['progress'] / $sandbox['max']);
  $sandbox_status = $sandbox;
  unset($sandbox_status['messages']);
  $sandbox['messages'][] = t('$sandbox=') . print_r($sandbox_status, TRUE);

  if ($sandbox['#finished']) {
    // hook_update_N() may optionally return a string which will be displayed
    // to the user.
    $final_message = '<ul><li>' . implode('</li><li>', $sandbox['messages']) . "</li></ul>";
    return t('The facility search module\'s database update did what it was supposed to do: @message', ['@message' => $final_message]);
  }
}