<?php

use Drupal\Core\Form\FormStateInterface;

function msca_job_form_node_job_posting_form_alter(&$form, FormStateInterface $form_state) {
  // Add the AJAX callback to the org field.
  $form['field_job_posting_org']['widget'][0]['target_id']['#ajax'] = [
    'event' => 'change',
    'wrapper' => 'job-form-ajax',
    'callback' => 'msca_job_org_ajax_callback',
  ];
  // Add the ajax wrapper to the address field.
  $form['#prefix'] = '<div id="job-form-ajax">';
  $form['#suffix'] = '</div>';
  $org_nid = $form_state->getValue('field_job_posting_org');
  if (!empty($org_nid[0]['target_id'])) {
    $org_nid = $org_nid[0]['target_id'];
    $org_node = \Drupal::entityTypeManager()->getStorage('node')->load($org_nid);
    if (empty($org_node)) {
      return;
    }
    // Set the defaults of the org address field based on the address of the org.
    $input = $form_state->getUserInput();
    $address = $org_node->get('field_address')->get(0)->getValue();
    $address_defaults = &$form['field_job_posting_org_address']['widget'][0]['address']['#default_value'];
    foreach ($address as $key => $value) {
      if (array_key_exists($key, $address_defaults))  {
        $address_defaults[$key] = $value;
      }
    }
    // FAPI detects blank user input so it won't set the defaults
    // without removing that input.
    unset($input['field_job_posting_org_address']);

    // Set the other org info defaults.
    $website = $org_node->field_customer_web_site->value;
    if (!empty($website)) {
      $form['field_job_posting_org_website']['widget'][0]['uri']['#default_value'] = $website;
      unset($input['field_job_posting_org_website']);
    }

    $fax = $org_node->field_customer_fax_number->value;
    if (!empty($fax)) {
      $form['field_job_posting_org_fax']['widget'][0]['value']['#default_value'] = $fax;
      unset($input['field_job_posting_org_fax']);
    }

    $phone = $org_node->field_customer_phone_number->value;
    if (!empty($fax)) {
      $form['field_job_posting_org_phone']['widget'][0]['value']['#default_value'] = $phone;
      unset($input['field_job_posting_org_phone']);
    }
    $form_state->setUserInput($input);
  }
  if (!\Drupal::currentUser()->hasPermission('administer content')) {
    msca_job_alter_job_posting_form($form, $form_state);
  }
}

/**
 * Organization ajax callback.
 */
function msca_job_org_ajax_callback($form, FormStateInterface $formState) {
  return $form;
}

/**
 * Additional job post form altering for end users.
 */
function msca_job_alter_job_posting_form(&$form, FormStateInterface $form_state) {
  $to_hide = [
    'path',
    'promote',
    'sticky',
    'uid',
    'revision_log',
    'revision',
    'options',
    'menu',
    'created',
    'publish_on',
    'unpublish_on',
    'advanced',
  ];
  foreach ($form as $form_key => &$form_item) {
    if (in_array($form_key, $to_hide)) {
      $form_item['#access'] = FALSE;
    }
  }
  $submit = $form['actions']['submit']['#submit'];
  $submit[] = 'msca_job_add_form_submit';
  // Hide the default submit button.
  foreach  ($form['actions'] as $action_key => &$action_item) {
    if (is_array($action_item)) {
      $action_item['#access'] = FALSE;
    }
  }
  unset($form['actions']);
  $form['actions'] = [
    '#type' => 'actions',
  ];
  $form['actions']['submit_job'] = [
    '#type' => 'submit',
    '#value' => t('Submit Job Posting'),
    '#submit' => $submit,
  ];
}

/**
 * Job posting form extra submit function.
 */
function msca_job_add_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeInterface $node */
  $node = $form_state->getFormObject()->getEntity();
  // Redirect to a page with subscription content.
  $url_redirect = \Drupal::state()->get('msca_job_config_redirect');
  if (!empty($url_redirect)) {
    $url_redirect = \Drupal\Core\Url::fromUserInput($url_redirect);
    $form_state->setRedirectUrl($url_redirect);
  }
  // Send an email notification to admins.
  /** @var \Drupal\Core\Mail\MailManagerInterface $mailer */
  $mailer = \Drupal::service('plugin.manager.mail');
  $to = \Drupal::state()->get('msca_job_config_notify');
  if (empty($to)) {
    return;
  }
  $wd_args = [
    '@to' => $to,
    '@nid' => $node->id(),
    'link' => $node->toLink('View')->toString(),
  ];
  try {
    $mailer->mail('msca_job', 'job_post', $to, $node->language()
      ->getId(), [
      'node' => $form_state->getFormObject()->getEntity(),
    ]);
    \Drupal::logger('msca_job')->notice('Job posting form used for job @nid and notification sent to @to', $wd_args);
  }
  catch (Exception $exception) {
    watchdog_exception('msca_job', $exception);
    \Drupal::logger('msca_job')->error('Unable to send job posting email to @to for job @nid', $wd_args);
  }
}

/**
 * Implements hook_mail().
 */
function msca_job_mail($key, &$message, $params) {
  if ($key === 'job_post') {
    /** @var \Drupal\node\NodeInterface $node */
    $node = $params['node'];
    $message['subject'] = 'New job posting submission: ' . $node->label();
    $message['body'][] = 'A new job posting has been submitted. Click to view and approve.';
    $message['body'][] = $node->toLink($node->toUrl()->toString())->toString();
  }
}
