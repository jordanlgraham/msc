<?php
/**
 * @file
 * Theme functions.
 */

use Drupal\taxonomy\Entity\Term;

// Include all files from the includes directory.
$includes_path = dirname(__FILE__) . '/includes/*.inc';
foreach (glob($includes_path) as $filename) {
  require_once dirname(__FILE__) . '/includes/' . basename($filename);
}

function msca_theme_preprocess_menu(&$vars) {
  if ($vars['menu_name'] == 'masthead') {
    $account = \Drupal::currentUser()->getAccount();
    if ($account->isAuthenticated()) {
      foreach ($vars['items'] as $key => $item) {
        /** @var \Drupal\Core\Url $url */
        if ($item['title'] === 'Join Mass Senior Care') {
          unset($vars['items'][$key]);
        }
      }
    }
  }
}

/**
 * Implements template_preprocess_node().
 *
 * @param array $variables
 * @return void
 */
function msca_theme_preprocess_node(&$variables) {
  //Upcoming Education and Events section needs field_date and field_end_date to
  //appear in a couple different formats.

  if (in_array($variables['view_mode'], ['default', 'homepage', 'calendar', 'sidebar', 'teaser', 'newsletter'])) {
    if(!empty($variables['content']['field_date'][0]['#markup'])) {
      $date_field = $variables['content']['field_date'][0]['#markup'];
    }
    // If no date set for event, display node's standard authored date
    else {
      $date_field = $variables['date'];
    }
    if(!empty($date_field) && is_string($date_field)) {
      $field_date = strtotime($date_field);
      $variables['content']['square_month'] = date('M', $field_date);
      $variables['content']['square_day'] = date('j', $field_date);
      $variables['content']['full_start_date'] = date('F j \a\t g:iA', $field_date);
      if (!empty($variables['content']['field_end_date'][0]['#markup'])) {
        $field_end_date = strtotime($variables['content']['field_end_date'][0]['#markup']);
        $variables['content']['full_end_date'] = date('F j \a\t g:iA', $field_end_date);
      }
    }
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node  && !is_string($node)) {
    $nid = $node->id();
    $allContent = views_embed_view('all_content', 'embed_1', $nid);
    $variables['all_content'] = \Drupal::service('renderer')->render($allContent);
  }
}

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 */
function msca_theme_preprocess_html(array &$variables) {
  // Add class to body tag, if set.
  $variables['multisite_status'] = \Drupal::config('config_split.config_split.foundation')->get('status');
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * Adds per content type template suggestions for page.html.twig.
 */
function msca_theme_theme_suggestions_page_alter(array &$suggestions, array $variables) {

  $multisite_status = \Drupal::config('config_split.config_split.foundation')->get('status');
  $node = \Drupal::routeMatch()->getParameter('node');
  $revision = \Drupal::routeMatch()->getRawParameter('node_revision');

  //revision IDs are strings and node ids are strings when a revision is loaded.
  //node parameters loaded by getParameter are objects and the bundle can be accessed normally.
  if ($node) {
    if ($revision) {
      $revised_node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadRevision($revision);

      $content_type = $revised_node->bundle();
    }
    else {
      $content_type = $node->bundle();
    }

    $suggestions[] = 'page__' . $content_type;
  }

  //suggestions for foundation multisite
  if ($multisite_status == 'TRUE') {
    $foundation = 'foundation';
    $suggestions[] = 'page__' .  $foundation;
    if ($node) {
       $content_type = $node->bundle();
       $suggestions[] = 'page__' . $content_type . '__' . $foundation;
    }
  }

}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * Adds path-based variables for page-title.html.twig.
 */
function msca_theme_theme_suggestions_page_title_alter(array &$suggestions, array &$variables) {

  $node = \Drupal::routeMatch()->getParameter('node');
  $revision = \Drupal::routeMatch()->getRawParameter('node_revision');

  //revision IDs are strings and node ids are strings when a revision is loaded.
  //node parameters loaded by getParameter are objects and the bundle can be accessed normally.
  if ($node) {
    if ($revision) {
      $revised_node = \Drupal::entityTypeManager()
        ->getStorage('node')
        ->loadRevision($revision);

      $content_type = $revised_node->bundle();
      $content_type = str_replace('_', '-', $content_type);
    }
    else {
      $content_type = $node->bundle();
      $content_type = str_replace('_', '-', $content_type);
    }

    $variables['title_icon_class'] = $content_type;
  }
  else {
    $current_path = \Drupal::service('path.current')->getPath();
    $result = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);

    $path_alias = trim($result, '/');
    $path_alias = str_replace('/', '-', $path_alias);

    $variables['title_icon_class'] = $path_alias;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 * Adds template suggestions for field.html.twig.
 */
function msca_theme_theme_suggestions_field_alter(array &$suggestions, $variables) {
  $field = $variables['element'];
  if ($field['#entity_type'] !== 'node') {
    return;
  }
  $inline_fields = [
    'template' => 'field__node__inline',
    'fields' => [
      'field_event_category',
      'field_administrator',
      'field_customer_fax_number',
      'field_customer_phone_number',
      'field_date',
      'field_end_date',
      'field_licensed_nursing_facility',
      'field_resource_category',
      'field_video_date',
    ],
  ];
  $multiple_inline = [
    'template' => 'field__node__multiple_inline',
    'fields' => [
      'field_contact_title',
      'field_contact',
      'field_email',
      'field_phone',
    ],
  ];
  $inline_comma = [
    'template' => 'field__node__inline_comma',
    'fields' => [
      'field_languages_spoken',
      'field_populations_served',
      'field_specialized_unit',
    ],
  ];
  $services = [
    'template' => 'field__node__services',
    'fields' => [
      'field_primary_services',
      'field_additional_services',
    ],
  ];
  foreach ([$inline_fields, $multiple_inline, $inline_comma, $services] as $field_list) {
    if (in_array($field['#field_name'], $field_list['fields'])) {
      $suggestions[] = $field_list['template'];
    }
  }
 // This is helpful for theming teasers etc.
 $suggestions[] = 'field__' . $variables['element']['#field_name'] . '__' . $variables['element']['#view_mode'];
}

/**
 * Implements hook_views_pre_render().
 * Dynamic page titles based on exposed filter values.
 */
function msca_theme_views_pre_render(&$view) {
 if ($view->id() == 'all_content') {

    // get value of exposed filter
    if ($view->current_display == 'newsroom') {
      $filter_value = $view->exposed_data['news_category'][0]['target_id'];
    }
    else if ($view->current_display == 'events'
      && !is_null($view->exposed_data['event_type'])) {
      $filter_value = $view->exposed_data['event_type'][0]['target_id'];
    }
    else if ($view->current_display == 'member_resources') {
      $filter_value = $view->exposed_data['topic'][0]['target_id'];
    }
    else if ($view->current_display == 'advocacy') {
      $filter_value = $view->exposed_data['topic'][0]['target_id'];
    }

    if (isset($filter_value)) {

      // Find the term based on tid.
      $term = Term::load($filter_value);

      // Get term name.
      if (isset($term)) {
        $name = $term->getName();
      }

      // Prepend titles with text.
      if (isset($name)) {
        if ($view->current_display == 'newsroom') {
          $page_name = t('Newsroom: ') . $name;
        }
        else if ($view->current_display == 'events') {
          $page_name = $name;
        }
        else if ($view->current_display == 'member_resources') {
          $page_name = t('Member Resources: ') . $name;
        }
        else if ($view->current_display == 'advocacy') {
          $page_name = t('Advocacy: ') . $name;
        }

        // set title to that value
        $view->setTitle($page_name);
      }

    }
  }
}

function msca_theme_preprocess_block(&$variables) {
  if ($variables['plugin_id'] == 'search_form_block') {
    $variables['content']['actions']['submit']['#value'] = t('Search content');
  }
}
